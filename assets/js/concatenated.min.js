class VideoPlayer extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.hasInteracted=!1,this.hideControlsTimeout=null,this.isSeeking=!1,this.wasPlaying=!1,this.observer=null,this.fadeoutTimeout=null}connectedCallback(){const t="ontouchstart"in window;this.render(t),this.video=this.shadowRoot.querySelector("video"),this.videoContainer=this,t||(this.playButton=this.shadowRoot.querySelector("#playButton"),this.muteButton=this.shadowRoot.querySelector("#muteButton"),this.fullscreenButton=this.shadowRoot.querySelector("#fullscreenButton"),this.videoOverlay=this.shadowRoot.querySelector(".video-overlay"),this.controls=this.shadowRoot.querySelector(".controls"),this.progressBar=this.shadowRoot.querySelector(".progress-bar"),this.progressBarFill=this.shadowRoot.querySelector(".progress-bar-fill")),this.video?(t||(this.updateMuteButtonIcon(!0),this.playButton?.addEventListener("click",(()=>this.togglePlay())),this.videoOverlay?.addEventListener("click",(()=>this.togglePlay())),this.muteButton?.addEventListener("click",(()=>this.toggleMute())),this.fullscreenButton?.addEventListener("click",(()=>this.toggleFullscreen())),this.video.addEventListener("timeupdate",(()=>this.updateProgressBar())),this.progressBar?.addEventListener("mousedown",(t=>this.startSeeking(t))),this.progressBar?.addEventListener("mousemove",(t=>this.seeking(t))),this.progressBar?.addEventListener("mouseup",(()=>this.endSeeking())),this.progressBar?.addEventListener("mouseleave",(()=>this.endSeeking())),this.addEventListener("mousemove",(()=>this.showControls())),this.addEventListener("mouseleave",(()=>this.hideControls()))),document.addEventListener("visibilitychange",(()=>this.handleVisibilityChange())),this.video.muted=!0,this.hasAttribute("autoplay")?(this.video.play().catch((()=>{t||this.classList.add("paused")})),this.updatePlayButtonIcon(!1)):(this.classList.add("paused"),this.updatePlayButtonIcon(!0)),this.video.loop=this.hasAttribute("loop")):console.error("Required video element not found"),this.setupIntersectionObserver(),this.volumeBars=this.shadowRoot.querySelector("#volumeBars"),this.volumeBars?.addEventListener("click",(t=>this.handleVolumeBarClick(t))),this.updateVolumeBars(this.video.volume),this.showControls(),document.addEventListener("fullscreenchange",(()=>this.handleFullscreenChange())),this.setupAccessibilityFeatures(),this.video.addEventListener("loadedmetadata",(()=>{this.setupCaptions()}))}render(t=!1){const e=this.getAttribute("video-url"),n=this.getAttribute("video-poster"),i=this.getAttribute("video-title"),s=this.getAttribute("video-description"),o=this.hasAttribute("muted"),a=this.hasAttribute("playsinline"),r=this.hasAttribute("autoplay"),l=this.hasAttribute("loop");this.shadowRoot.innerHTML=`\n            <style>\n                :host {\n                    display: flex;\n                    position: relative;\n                    justify-content: center;\n                    align-items: center;\n                    background-color: black;\n                    overflow: hidden;\n                    --theme-color: var(--video-theme-color, currentColor);\n                    text-align: left;\n                    container-type: inline-size;\n                }\n\n                :host(:fullscreen) {\n                    border-radius: 0 !important;\n                }\n\n                .video {\n                    pointer-events: ${t?"auto":"none"};\n                    z-index: 10;\n                }\n                .video-info {\n                    position: static;\n                    padding: 0 24px;\n                    color: white;\n                    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4);\n                    margin-bottom: 12px;\n                }\n                \n                .video-info h2 {\n                    margin: 0 0 4px;\n                    font-size: 22px;\n                    font-weight: 700;\n                }\n                \n                .video-info p {\n                    margin: 0;\n                    font-size: 14px;\n                    line-height: 18px;\n                    opacity: 0.74;\n                }\n\n                .video-info h2,\n                .video-info p{\n                    overflow: hidden;\n                    display: -webkit-box;\n                    -webkit-line-clamp: 1; /* number of lines to show */\n                    line-clamp: 1; \n                    -webkit-box-orient: vertical;\n                }\n                \n                :host(.paused) .video-info {\n                    opacity: 1;\n                }\n\n                ${t?"":"\n                    .video-overlay {\n                        position: absolute;\n                        top: -1px;\n                        right: -1px;\n                        bottom: -1px;\n                        left: -1px;\n                        z-index: 20;\n                        opacity: 0;\n                        background: linear-gradient(to bottom, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 80%);\n                        cursor: pointer;\n                        transition: opacity 200ms linear;\n                    }\n                    .video-overlay:hover{\n                        opacity: 0.4;\n                    }\n                    :host(.paused) .video-overlay{\n                        opacity: 1;\n                    }\n                    .video {\n                        pointer-events: none;\n                        z-index: 10;\n                        width: 100%;\n                        height: auto;\n                    }\n                    .controls {\n                        position: absolute;\n                        bottom: 0;\n                        left: 0;\n                        right: 0;\n                        z-index: 40;\n                        display: flex;\n                        flex-direction: column;\n                        pointer-events: auto;\n                        opacity: 1;\n                        transition: opacity 0.3s ease;\n                        background: linear-gradient(to top, rgba(0,0,0,0.8) 0%, transparent 100%);\n                        padding-bottom: 8px;\n                    }\n                    .play-info-container {\n                        display: flex;\n                        align-items: center;\n                        gap: 16px;\n                        opacity: 1;\n                        pointer-events: none;\n                        transition: opacity 0.3s ease;\n                    }\n                    .play-info-container:has(.video-info) {\n                        justify-content: flex-start;\n                        margin-left: 24px;\n                    }\n                    .play-info-container:not(:has(.video-info)) {\n                        justify-content: center;\n                    }\n                    .left-controls {\n                        display: flex;\n                        align-items: center;\n                        gap: 8px;\n                    }\n                    .play-button {\n                        position: static;\n                        display: flex;\n                        cursor: pointer;\n                    }\n                    .play-button-inner {\n                        display: flex;\n                        padding: 0 14px 0 24px;\n                        height: 100%;\n                        align-items: center;\n                        justify-content: center;\n                        opacity: 0.85;\n                    }\n                    .progress-bar-container {\n                        grid-row: 1;\n                        height: 24px;\n                        display: flex;\n                        align-items: center;\n                    }\n                    .progress-bar {\n                        width: 100%;\n                        height: 4px;\n                        background: rgba(255, 255, 255, 0.2);\n                        position: relative;\n                        cursor: pointer;\n                        margin: 10px 0;\n                    }\n                    .progress-bar:hover {\n                        height: 8px;\n                        margin-top: 8px;\n                        margin-bottom: 8px;\n                    }\n                    .progress-bar-fill {\n                        position: absolute;\n                        top: 0;\n                        left: 0;\n                        height: 100%;\n                        background: var(--theme-color);\n                        width: 0%;\n                        transition: width 0.1s linear;\n                    }\n                    .seek-handle {\n                        position: absolute;\n                        top: 50%;\n                        transform: translate(-50%, -50%);\n                        width: 12px;\n                        height: 12px;\n                        background: var(--theme-color);\n                        border-radius: 50%;\n                        opacity: 0;\n                        transition: opacity 0.2s;\n                        pointer-events: none;\n                    }\n                    .progress-bar:hover .seek-handle {\n                        opacity: 1;\n                    }\n                    .play-button svg {\n                        width: 24px;\n                        height: 24px;\n                        fill: white;\n                        stroke: transparent;\n                    }\n                    button {\n                        background-color: transparent;\n                        border: none;\n                        color: white;\n                        padding-top: 16px;\n                        padding-bottom: 12px;\n                        padding-left: 16px;\n                        padding-right: 16px;\n                        cursor: pointer;\n                        border-radius: 4px;\n                        transition: background-color 0.3s, transform 0.3s;\n                    }\n                    button:hover {\n                        transform: scale(1.05);\n                    }\n                    button:active {\n                        transform: scale(0.95);\n                    }\n                    .icon {\n                        width: 24px;\n                        height: 24px;\n                        stroke: var(--theme-color);\n                        stroke-width: 1.5px;\n                    }\n                    .sr-only {\n                        position: absolute;\n                        width: 1px;\n                        height: 1px;\n                        padding: 0;\n                        margin: -1px;\n                        overflow: hidden;\n                        clip: rect(0, 0, 0, 0);\n                        white-space: nowrap;\n                        border: 0;\n                    }\n                    .button-group {\n                        display: flex;\n                        align-items: center;\n                        gap: 0;\n                    }   \n\n                    /* Hide controls by default */\n                    .controls {\n                        opacity: 0;\n                    }\n\n                    /* Only show controls on hover if user has interacted */\n                    :host([data-has-interacted]:hover) .controls{\n                        opacity: 1;\n                    }\n\n                    /* Only show controls when paused if user has interacted */\n                    :host(.paused[data-has-interacted]) .controls {\n                        opacity: 1;\n                    }\n\n                    /* Remove the general hover rule that was showing controls */\n                    :host(:hover) .controls {\n                        opacity: 1;\n                    }\n\n                    /* Show controls by default on touch devices */\n                    @media (hover: none) {\n                        .controls {\n                            opacity: var(--controls-opacity, 0);\n                        }\n                    }\n\n                    /* Show controls on hover for non-touch devices */\n                    :host(:hover) .controls {\n                        opacity: var(--controls-opacity,0);\n                    }\n\n                    /* Show controls when paused AND user has interacted */\n                    :host(.paused[data-has-interacted]) .controls {\n                        opacity: 1;\n                    }\n\n                    .buttons-container{\n                        display: flex;\n                        justify-content: space-between;\n                    }\n\n                    .volume-bars {\n                        display: flex;\n                        align-items: flex-end;\n                        justify-content: space-between;\n                        gap: 0;\n                        height: 18px;\n                        padding: 0;\n                        width: calc(4px * 5);\n                        cursor: pointer;\n                    }\n\n                    .volume-bar {\n                        width: 4px;\n                        opacity: 0.3;\n                        transition: opacity 0.2s, height 0.2s;\n                        cursor: pointer;\n                        position: relative;\n                        height: 20px;\n                    }\n\n                    .volume-bar:after{\n                        content: '';\n                        position: absolute;\n                        background: white;\n                        bottom: 0;\n                        left: 50%;\n                        transform: translateX(-50%);\n                        width: 2px;\n                        height: 100%;\n                    }\n\n                    .volume-bar.active {\n                        opacity: 1;\n                    }\n\n                    .volume-bar:nth-child(1):after { height: 3px; }\n                    .volume-bar:nth-child(2):after { height: 7px; }\n                    .volume-bar:nth-child(3):after { height: 11px; }\n                    .volume-bar:nth-child(4):after { height: 15px; }\n                    .volume-bar:nth-child(5):after { height: 19px; }\n\n                    /* Initial state styles */\n                    :host(.paused:not([data-has-interacted])) .controls {\n                        opacity: 1;\n                    }\n\n                    /* Center play button in initial state */\n                    :host(.paused:not([data-has-interacted])) .controls-top {\n                        display: grid;\n                        place-items: center;\n                        height: 100%;\n                    }\n\n                    :host(.paused:not([data-has-interacted])) .play-info-container {\n                        margin: 0;\n                        justify-self: center;\n                        align-self: center;\n                    }\n\n                    /* Restore bottom controls after interaction */\n                    :host([data-has-interacted]) .controls-bottom {\n                        position: relative;\n                        visibility: visible;\n                    }\n\n                    /* Small screen adjustments */\n                    @container (max-width: 640px) {\n                        .controls {\n                            grid-template-rows: 1fr auto auto;\n                        }\n                        \n                        .controls-bottom {\n                            padding: 0 8px 8px;\n                            gap: 4px;\n                        }\n                    }\n\n                    /* Center play button in initial state */\n                    :host(.paused:not([data-has-interacted])) .controls-top {\n                        display: grid;\n                        place-items: center;\n                        height: 100%;\n                    }\n\n                    :host(.paused:not([data-has-interacted])) .play-info-container {\n                        margin: 0;\n                        justify-self: center;\n                        align-self: center;\n                    }\n\n                    /* Remove any potential offsets in initial state */\n                    :host(.paused:not([data-has-interacted])) .controls-top,\n                    :host(.paused:not([data-has-interacted])) .play-info-container:not(:has(.video-info)) {\n                        padding: 0;\n                    }\n\n                    .play-info-container {\n                        opacity: 1;\n                        transition: opacity 0.3s ease;\n                    }\n\n                    :host(:hover) .play-info-container {\n                        opacity: 1;\n                    }\n\n                    .time-display {\n                        color: white;\n                        font-size: 14px;\n                        padding: 2px 12px 0;\n                        opacity: 0.9;\n                        font-variant-numeric: tabular-nums;\n                        display: flex;\n                        align-items: center;\n                    }\n\n                    .right-controls {\n                        display: flex;\n                        align-items: center;\n                    }\n\n                    /* Add focus styles */\n                    button:focus-visible,\n                    .progress-bar:focus-visible {\n                        outline: 2px solid var(--theme-color);\n                        outline-offset: 2px;\n                    }\n                    \n                    /* Add high contrast mode support */\n                    @media (forced-colors: active) {\n                        .icon {\n                            forced-color-adjust: auto;\n                        }\n                        .progress-bar-fill {\n                            background: CanvasText;\n                        }\n                    }\n                "}\n            </style>\n            ${t?"":'<div class="video-overlay"></div>'}\n            <video \n                id="video" \n                class="video" \n                width="100%" \n                ${o?"muted":""} \n                ${a?"playsinline":""} \n                ${t?"controls":""}\n                ${n?`poster="${n}"`:""}\n                ${r?"autoplay":""}\n                ${l?"loop":""}\n            >\n                <source src="${e}" type="video/mp4">\n                Your browser does not support HTML5 video.\n            </video>\n            ${t?"":`\n                <div class="controls">\n                    <div class="controls-bottom">\n                        ${i||s?`\n                            <div class="video-info">\n                                ${i?`<h2>${i}</h2>`:""}\n                                ${s?`<p>${s}</p>`:""}\n                            </div>\n                        `:""}\n                        <div class="progress-bar-container">\n                            <div class="progress-bar">\n                                <div class="progress-bar-fill"></div>\n                                <div class="seek-handle"></div>\n                            </div>\n                        </div>\n                        <div class="buttons-container">\n                            <div class="left-controls">\n                                <div class="button-group">\n                                    <div id="playButton" class="play-button">\n                                        <div class="play-button-inner">\n                                            <svg width="14" height="16" viewBox="0 0 14 16" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">\n                                                <path d="M0.5 14.3507V1.64929C0.5 0.871991 1.34797 0.391878 2.0145 0.791793L12.599 7.14251C13.2464 7.53091 13.2464 8.46909 12.599 8.85749L2.0145 15.2082C1.34797 15.6081 0.5 15.128 0.5 14.3507Z" stroke-linecap="round" stroke-linejoin="round"/>\n                                            </svg>\n                                        </div>\n                                        <span class="sr-only">Play</span>\n                                    </div>\n                                    <button id="muteButton">\n                                        <span class="sr-only">Mute</span>\n                                    </button>\n                                    <div id="volumeBars" class="volume-bars">\n                                        <div class="volume-bar" data-volume="0.2"></div>\n                                        <div class="volume-bar" data-volume="0.4"></div>\n                                        <div class="volume-bar" data-volume="0.6"></div>\n                                        <div class="volume-bar" data-volume="0.8"></div>\n                                        <div class="volume-bar" data-volume="1.0"></div>\n                                    </div>\n                                </div>\n                            </div>\n                            <div class="right-controls">\n                                <div class="time-display">0:00 / 0:00</div>\n                                <button id="fullscreenButton">\n                                    <svg class="icon" id="fullscreenIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                                        <path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M21 8V5a2 2 0 0 0-2-2h-3"/><path d="M3 16v3a2 2 0 0 0 2 2h3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/>\n                                    </svg>\n                                    <span class="sr-only">Fullscreen</span>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            `}\n        `}togglePlay(){if(this.video.paused){this.hasAttribute("autoplay")||(this.video.muted=!1,this.updateMuteButtonIcon(!1)),this.video.play(),this.classList.remove("paused"),this.updatePlayButtonIcon(!1),this.hasInteracted=!0,this.setAttribute("data-has-interacted",""),this.style.setProperty("--controls-opacity","1");const t=this.shadowRoot.querySelector(".controls");t.style.opacity="1",t.style.bottom="0",this.showControls(!0)}else this.video.pause(),this.classList.add("paused"),this.updatePlayButtonIcon(!0),clearTimeout(this.hideControlsTimeout),this.showControls(!0)}updatePlayButtonIcon(t){const e=this.shadowRoot.querySelector("#playButton .play-button-inner");e&&(e.innerHTML=t?'\n            <svg width="14" height="16" viewBox="0 0 14 16" fill="white" xmlns="http://www.w3.org/2000/svg">\n                <path d="M0.5 14.3507V1.64929C0.5 0.871991 1.34797 0.391878 2.0145 0.791793L12.599 7.14251C13.2464 7.53091 13.2464 8.46909 12.599 8.85749L2.0145 15.2082C1.34797 15.6081 0.5 15.128 0.5 14.3507Z"/>\n            </svg>\n        ':'\n            <svg width="14" height="16" viewBox="0 0 14 16" fill="white" xmlns="http://www.w3.org/2000/svg">\n                <rect x="2" y="0.5" width="3" height="15" rx="1"/>\n                <rect x="9" y="0.5" width="3" height="15" rx="1"/>\n            </svg>\n        ')}toggleMute(){this.video.muted=!this.video.muted,this.updateMuteButtonIcon(this.video.muted),this.updateVolumeBars(this.video.muted?0:this.video.volume),this.hasInteracted=!0,this.setAttribute("data-has-interacted",""),this.style.setProperty("--controls-opacity","1"),this.hideControlsIfPlaying(),this.showControls(!0)}updateMuteButtonIcon(t){this.muteButton.innerHTML=t?'\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-x icon">\n                <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/>\n                <path d="m18 12 4-4"/>\n                <path d="m22 12-4-4"/>\n            </svg>\n            <span class="sr-only">Unmute</span>\n        ':'\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2 icon">\n                <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/>\n                <path d="M16 9a5 5 0 0 1 0 6"/>\n                <path d="M19.364 18.364a9 9 0 0 0 0-12.728"/>\n            </svg>\n            <span class="sr-only">Mute</span>\n        '}toggleFullscreen(){document.fullscreenElement?document.exitFullscreen().catch((t=>console.log("Exit fullscreen failed:",t))):this.videoContainer.requestFullscreen().catch((t=>console.log("Fullscreen failed:",t)))}hideControlsIfPlaying(){this.video.paused||this.video.muted||this.controls.classList.add("opacity-0")}showControls(t=!1){clearTimeout(this.hideControlsTimeout),this.controls&&(this.controls.style.opacity="1"),this.video.paused&&!t||(this.hideControlsTimeout=setTimeout((()=>{this.hideControls()}),2e3))}hideControls(){clearTimeout(this.fadeoutTimeout),this.video.paused||this.isSeeking||(this.controls.style.opacity="0")}handleVisibilityChange(){document.hidden&&this.video.pause()}updateProgressBar(){if(this.video.duration){const t=this.video.currentTime/this.video.duration*100;this.progressBarFill.style.width=`${t}%`;const e=this.shadowRoot.querySelector(".seek-handle");e&&(e.style.left=`${t}%`);const n=this.shadowRoot.querySelector(".time-display");n&&(n.textContent=`${this.formatTime(this.video.currentTime)} / ${this.formatTime(this.video.duration)}`)}}startSeeking(t){this.isSeeking=!0,this.seeking(t),clearTimeout(this.hideControlsTimeout)}seeking(t){if(!this.isSeeking)return;let e;e=t.type.startsWith("touch")?t.touches[0].clientX:t.clientX;const n=this.progressBar.getBoundingClientRect(),i=(e-n.left)/n.width,s=Math.max(0,Math.min(1,i))*this.video.duration;this.progressBarFill.style.width=100*i+"%";const o=this.shadowRoot.querySelector(".seek-handle");o&&(o.style.left=100*i+"%"),this.video.currentTime=s}endSeeking(){this.isSeeking=!1,this.showControls()}setupIntersectionObserver(){this.observer=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting?this.wasPlaying&&this.video.play().catch((()=>{console.log("Auto-resume failed")})):(this.wasPlaying=!this.video.paused,this.video.paused||this.video.pause())}))}),{threshold:.2}),this.observer.observe(this)}disconnectedCallback(){this.observer&&this.observer.disconnect()}handleVolumeBarClick(t){if(t.target.classList.contains("volume-bar")){const e=parseFloat(t.target.dataset.volume);this.video.volume=e,this.video.muted=!1,this.updateMuteButtonIcon(!1),this.updateVolumeBars(e)}}updateVolumeBars(t){this.shadowRoot.querySelectorAll(".volume-bar").forEach((e=>{parseFloat(e.dataset.volume)<=t?e.classList.add("active"):e.classList.remove("active")}))}handleFullscreenChange(){this.fullscreenButton.innerHTML=document.fullscreenElement?'\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-minimize icon">\n                <path d="M8 3v3a2 2 0 0 1-2 2H3"/><path d="M21 8h-3a2 2 0 0 1-2-2V3"/><path d="M3 16h3a2 2 0 0 1 2 2v3"/><path d="M16 21v-3a2 2 0 0 1 2-2h3"/>\n            </svg>\n        ':'\n            <svg class="icon" id="fullscreenIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                <path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M21 8V5a2 2 0 0 0-2-2h-3"/><path d="M3 16v3a2 2 0 0 0 2 2h3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/>\n            </svg>\n        ',document.fullscreenElement&&this.showControls(!0)}formatTime(t){return`${Math.floor(t/60)}:${Math.floor(t%60).toString().padStart(2,"0")}`}setupAccessibilityFeatures(){[this.playButton,this.muteButton,this.volumeBars,this.progressBar,this.fullscreenButton].forEach(((t,e)=>{t&&t.setAttribute("tabindex",e+1)})),this.video.setAttribute("aria-label",this.getAttribute("video-title")||"Video player"),this.progressBar?.setAttribute("role","slider"),this.progressBar?.setAttribute("aria-label","Progress"),this.progressBar?.setAttribute("aria-valuemin","0"),this.progressBar?.setAttribute("aria-valuemax","100"),this.progressBar?.setAttribute("aria-valuenow","0"),this.setupKeyboardControls()}setupCaptions(){const t=this.video.textTracks;if(t.length>0){const e=document.createElement("button");e.innerHTML='\n                <svg class="icon" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor">\n                    <path d="M21 5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2V5z"/>\n                    <path d="M7 8h3m-3 4h7m-7 4h3"/>\n                    <path d="M14 8h3m-3 4h3m-3 4h3"/>\n                </svg>\n                <span class="sr-only">Toggle Captions</span>\n            ',e.setAttribute("aria-label","Toggle closed captions");const n=this.shadowRoot.querySelector(".right-controls");n?.insertBefore(e,this.fullscreenButton);let i=!1;e.addEventListener("click",(()=>{i=!i,Array.from(t).forEach((t=>{"captions"!==t.kind&&"subtitles"!==t.kind||(t.mode=i?"showing":"hidden")})),e.setAttribute("aria-pressed",i)}))}}setupKeyboardControls(){this.addEventListener("keydown",(t=>{switch(t.key){case" ":case"k":t.preventDefault(),this.togglePlay();break;case"m":t.preventDefault(),this.toggleMute();break;case"f":t.preventDefault(),this.toggleFullscreen();break;case"ArrowLeft":t.preventDefault(),this.video.currentTime=Math.max(0,this.video.currentTime-5);break;case"ArrowRight":t.preventDefault(),this.video.currentTime=Math.min(this.video.duration,this.video.currentTime+5);break;case"ArrowUp":t.preventDefault(),this.video.volume=Math.min(1,this.video.volume+.1),this.updateVolumeBars(this.video.volume);break;case"ArrowDown":t.preventDefault(),this.video.volume=Math.max(0,this.video.volume-.1),this.updateVolumeBars(this.video.volume)}}))}}function fadeInElements(){let t=0;const e=document.querySelectorAll(".fade-in-element:not(.visible)");!function(t,e=66){if(!t||"function"!=typeof t)return;let n;window.addEventListener("scroll",(function(i){window.clearTimeout(n),n=setTimeout(t,e)}),!1)}((function(){t=0}));const n=new IntersectionObserver((e=>{e.forEach((e=>{if(e.isIntersecting){const i=50*t;((t,e)=>{setTimeout((()=>{t.classList.add("visible"),t.addEventListener("transitionend",(()=>{t.classList.remove("fade-in-element")}))}),e)})(e.target,i),n.unobserve(e.target),t++}}))}));e.forEach((t=>n.observe(t)))}customElements.define("video-player",VideoPlayer),document.addEventListener("DOMContentLoaded",(()=>{document.fonts.ready.then((()=>{document.querySelectorAll(".hidden-until-loaded").forEach((t=>{t.classList.remove("hidden-until-loaded")})),fadeInElements()}))})),document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll(".flip-card").forEach((t=>{t.addEventListener("mouseenter",(()=>{t.classList.add("flipped"),setTimeout((()=>{t.classList.remove("flipped")}),550)}))}))}));class Card extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"})}static get observedAttributes(){return["overline","title","media-src","media-type"]}connectedCallback(){this.render()}attributeChangedCallback(){this.render()}render(){const t=this.getAttribute("overline")||"",e=this.getAttribute("title")||"",n=this.getAttribute("media-src")||"",i=this.getAttribute("media-type")||"image",s=this.getAttribute("href")||"",o=`\n      <div class="overlay">\n        <span class="overline">${t}</span>\n        <h3 class="title">${e}</h3>\n      </div>\n      <div class="media-container">\n        ${"video"===i?`<video autoplay muted loop playsinline disablePictureInPicture preload="auto">\n              <source src="${n}" type="video/mp4">\n            </video>`:`<img src="${n}" alt="${e}">`}\n      </div>\n    `;this.shadowRoot.innerHTML=`\n      <style>\n        :host {\n          display: block;\n          position: relative;\n          border-radius: 12px;\n          box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1);\n          overflow: hidden;\n          container-type: inline-size;\n        }\n\n        .overlay {\n          position: absolute;\n          inset: 0;\n          display: flex;\n          flex-direction: column;\n          justify-content: flex-end;\n          background: linear-gradient(to top, rgba(0,0,0,1) 0%, transparent 60%);\n          padding: clamp(0.75rem, 0.5rem + 2vw, 2rem);\n          z-index: 2;\n        }\n\n        .overline {\n          color: white;\n          text-transform: uppercase;\n          letter-spacing: 0.1em;\n          font-size: 0.7rem;\n        }\n\n        .title {\n          color: white;\n          font-size: clamp(1.2rem, 1rem + 2vw, 4rem);\n          font-weight: 400;\n          margin-top: 0.35rem;\n          margin-bottom: 0;\n          max-width: 95%;\n          line-height: 1.25;\n          font-family: "TTCommonsProVariable", serif;\n          text-transform: uppercase;\n          letter-spacing: 0.03em;\n        }\n\n        .media-container {\n          position: relative;\n          width: 100%;\n          height: 100%;\n          overflow: hidden;\n        }\n\n        video, img {\n          width: 100%;\n          height: 100%;\n          object-fit: cover;\n          pointer-events: none;\n          transition: transform 0.3s ease;\n          transform-origin: center;\n        }\n\n        a:hover video,\n        a:hover img{\n          transform: scale(1.05);\n        }\n\n        a .title  {\n          text-decoration-thickness: 4px;\n          text-underline-offset: 4px;\n          text-decoration-style: solid;\n          text-decoration-skip-ink: auto;\n          text-decoration: underline solid rgba(255,255,255,0);\n          transition: text-decoration-color 200ms;\n        }\n      </style>\n      ${s?`<a href="${s}">${o}</a>`:o}\n    `}}customElements.define("media-card",Card);const imgObserver=new IntersectionObserver(((t,e)=>{t.forEach((t=>{if(t.isIntersecting){const n=t.target;replaceImageWithVideo(n),setSrcSetAndSizes(n),e.unobserve(n)}}))}),{rootMargin:"0px 0px 200px 0px"}),replaceImageWithVideo=t=>{const e=t.getAttribute("data-video");if(e){const n=document.createElement("video");n.src=e,n.style.objectFit="cover",n.setAttribute("playsinline",""),n.setAttribute("muted",""),n.playbackRate=1,n.addEventListener("ended",(()=>n.pause()));const i=t.closest(".media-wrapper");i&&(t.replaceWith(n),i.addEventListener("transitionend",(()=>{n.play()})))}},setSrcSetAndSizes=t=>{const e=t.clientWidth,n="https://ik.imagekit.io/UltraDAO/wallace/",i=t.src.split("/").pop().split("?")[0],s=t.getAttribute("data-max-width");if(s&&s<=e)t.src=`${n}${i}?tr=q-70`;else{let o=e,a=2*e,r=3*e,l=4*e;s&&(o=Math.min(s,o),a=Math.min(s,a),r=Math.min(s,r),l=Math.min(s,l));const h=`${n}${i}?tr=w-${o},q-70 1x,\n                            ${n}${i}?tr=w-${a},q-70 2x,\n                            ${n}${i}?tr=w-${r},q-70 3x`,d=`(max-width: 400px) ${o}px,\n                        (max-width: 800px) ${a}px,\n                        (max-width: 1200px) ${r}px,\n                        ${l}px`;t.src=`${n}${i}?tr=w-${o},q-70`,t.srcset=h,t.sizes=d}t.classList.add("loaded")},cardObserver=new IntersectionObserver(((t,e)=>{t.forEach((t=>{if(t.isIntersecting){const n=t.target;setBackground(n),e.unobserve(n)}}))}),{rootMargin:"0px 0px 200px 0px"}),setBackground=t=>{const e=t.clientWidth,n=window.devicePixelRatio||1,i=t.style.backgroundImage,[s,o]=i.slice(5,-2).split("?"),a=`${s}?tr=w-${Math.round(e*n)},q-70`;t.style.backgroundImage=`url("${a}")`,t.classList.add("loaded")};document.querySelectorAll(".bg-image-card").forEach((t=>{cardObserver.observe(t)})),document.addEventListener("DOMContentLoaded",(function(){const t=document.querySelectorAll(".zoomable");let e=null,n={};function i(t){const e=n[t];t.style.transition="all 0.3s ease",t.style.top=`${e.top}px`,t.style.left=`${e.left}px`,t.style.width=`${e.width}px`,t.style.height=`${e.height}px`,t.style.transform="none",setTimeout((()=>{t.parentNode.style.height="",t.classList.remove("zoom-fullscreen"),t.style.zIndex="1",t.style.position="",t.style.top="",t.style.left="",t.style.width="",t.style.height="",t.style.transform="",document.body.style.overflow=""}),300)}t.forEach((t=>{t.style.cursor="zoom-in",t.addEventListener("click",(function(){const s=t.classList.contains("zoom-fullscreen"),o=t.getAttribute("data-type");s?(document.body.classList.remove("zoom-active"),i(t),t.style.cursor="zoom-in","video"===o&&(t.muted=!0)):(e||(e=document.createElement("div"),e.className="page-overlay",document.body.appendChild(e)),document.body.classList.add("zoom-active"),function(t){const e=function(t){const e=t.getBoundingClientRect();return{left:e.left,top:e.top,width:e.width,height:e.height}}(t);n[t]=e;const i=.9*window.innerWidth,s=.9*window.innerHeight,{width:o,height:a}=function(t,e){const n=4/3;return t/e>n?t=e*n:e=t/n,{width:t,height:e}}(i,s);requestAnimationFrame((()=>{t.parentNode.style.height=`${e.height}px`,t.classList.add("zoom-fullscreen"),t.style.top="50%",t.style.left="50%",t.style.width=`${o}px`,t.style.height=`${a}px`,t.style.transform="translate(-50%, -50%)"})),t.style.position="fixed",t.style.top=`${e.top}px`,t.style.left=`${e.left}px`,t.style.width=`${e.width}px`,t.style.height=`${e.height}px`,t.style.zIndex="9999"}(t),document.body.style.overflow="hidden",t.style.cursor="zoom-out","video"===o&&(t.muted=!1,t.play()))}))})),e&&e.addEventListener("click",(()=>{document.querySelectorAll(".zoom-fullscreen").forEach((t=>{t.classList.remove("zoom-fullscreen"),i(t)})),document.body.classList.remove("active")}));document.querySelectorAll(".image-gallery").forEach((t=>{const e=t.querySelectorAll("img");let n=0,i=null;function s(t){e.forEach(((e,n)=>{e.style.display=n===t?"block":"none"}))}i=setInterval((function(){n=(n+1)%e.length,s(n)}),2e3),s(n)}))}));class GhostCanvas{constructor(){this.canvas=null,this.ctx=null,this.width=0,this.height=0,this.time=0,this.ghosts=[],this.animationId=null,this.config={ghostCount:1,maxRadius:400,minRadius:350,opacity:.6,speed:.2,noiseScale:.005,distortionIntensity:15},this.init()}init(){this.createCanvas(),this.createGhosts(),this.handleResize(),this.animate(),window.addEventListener("resize",(()=>this.handleResize()))}createCanvas(){this.canvas=document.createElement("canvas"),this.canvas.style.position="fixed",this.canvas.style.top="0",this.canvas.style.left="0",this.canvas.style.width="100vw",this.canvas.style.height="100vh",this.canvas.style.pointerEvents="none",this.canvas.style.zIndex="-1",this.canvas.style.opacity="0.8",this.ctx=this.canvas.getContext("2d"),document.body.appendChild(this.canvas)}createGhosts(){this.ghosts=[];for(let t=0;t<this.config.ghostCount;t++)this.ghosts.push({x:Math.random()*this.width,y:Math.random()*this.height,baseX:Math.random()*this.width,baseY:Math.random()*this.height,radius:this.config.minRadius+Math.random()*(this.config.maxRadius-this.config.minRadius),phase:Math.random()*Math.PI*2,speedX:(Math.random()-.5)*this.config.speed,speedY:(Math.random()-.5)*this.config.speed,noiseOffsetX:1e3*Math.random(),noiseOffsetY:1e3*Math.random(),intensity:.3+.7*Math.random(),pulsePhase:Math.random()*Math.PI*2,pulseSpeed:.002+.003*Math.random(),distortionPhase:Math.random()*Math.PI*2,distortionSpeed:.001+.002*Math.random(),tendrilRandomness:.5*Math.random()+.5,coreFluctuation:.3*Math.random()+.7,lastDirectionChange:0,directionChangeInterval:3e3+4e3*Math.random()})}handleResize(){this.width=window.innerWidth,this.height=window.innerHeight,this.canvas.width=this.width,this.canvas.height=this.height,this.ghosts.forEach((t=>{t.baseX>this.width&&(t.baseX=.8*this.width),t.baseY>this.height&&(t.baseY=.8*this.height)}))}noise(t,e,n){return Math.sin(.01*t+.001*n)*Math.cos(.008*e+8e-4*n)+Math.sin(.025*t+.0015*n)*Math.cos(.02*e+.0012*n)*.5+.25*Math.sin(.005*(t+e)+5e-4*n)}updateGhosts(){this.ghosts.forEach((t=>{const e=this.noise(t.noiseOffsetX+.002*this.time,t.noiseOffsetY,this.time),n=this.noise(t.noiseOffsetX,t.noiseOffsetY+.0015*this.time,this.time);if(this.time-t.lastDirectionChange>t.directionChangeInterval){t.speedX+=.4*(Math.random()-.5),t.speedY+=.4*(Math.random()-.5),t.lastDirectionChange=this.time,t.directionChangeInterval=3e3+4e3*Math.random();const e=3*this.config.speed;t.speedX=Math.max(-e,Math.min(e,t.speedX)),t.speedY=Math.max(-e,Math.min(e,t.speedY))}t.baseX+=t.speedX+3*e,t.baseY+=t.speedY+3*n;const i=t.radius;t.baseX<i&&(t.baseX=i,t.speedX=.5*Math.abs(t.speedX)),t.baseX>this.width-i&&(t.baseX=this.width-i,t.speedX=.5*-Math.abs(t.speedX)),t.baseY<i&&(t.baseY=i,t.speedY=.5*Math.abs(t.speedY)),t.baseY>this.height-i&&(t.baseY=this.height-i,t.speedY=.5*-Math.abs(t.speedY)),t.phase+=.02+.01*Math.sin(.001*this.time),t.pulsePhase+=t.pulseSpeed,t.distortionPhase+=t.distortionSpeed;const s=20*Math.sin(t.phase)+10*Math.sin(1.3*t.phase),o=15*Math.cos(.7*t.phase)+8*Math.cos(.9*t.phase);t.x=t.baseX+s,t.y=t.baseY+o}))}drawDistortion(t){const e=t.x,n=t.y,i=t.radius;this.drawGlowLayer(t,e,n,i),this.drawShadowLayer(t,e,n,i)}drawGlowLayer(t,e,n,i){const s=2.2*i,o=this.config.opacity*t.intensity*.5,a=120+30*Math.sin(.5*t.distortionPhase);for(let i=0;i<4;i++){const r=i/4,l=s*(.3+.7*r),h=o*(1-.6*r),d=this.ctx.createRadialGradient(e,n,0,e,n,l),c=70-12*i,p=30+8*i;d.addColorStop(0,`hsla(${a}, ${c}%, ${p}%, ${h})`),d.addColorStop(.4,`hsla(${a+10}, ${.8*c}%, ${.8*p}%, ${.7*h})`),d.addColorStop(.8,`hsla(${a+20}, ${.5*c}%, ${.6*p}%, ${.3*h})`),d.addColorStop(1,`hsla(${a}, ${c}%, ${p}%, 0)`),this.ctx.fillStyle=d,this.ctx.beginPath();const u=12,v=.1*Math.sin(t.pulsePhase+.3*i);this.ctx.moveTo(e+Math.cos(0)*l*(1+v),n+Math.sin(0)*l*(1+v));for(let s=1;s<=u;s++){const o=s/u*Math.PI*2,a=l*(1+(.15*Math.sin(2*o+t.distortionPhase+.2*i)+.1*Math.cos(3*o+t.pulsePhase))+v);this.ctx.lineTo(e+Math.cos(o)*a,n+Math.sin(o)*a)}this.ctx.closePath(),this.ctx.fill()}}drawShadowLayer(t,e,n,i){for(let s=0;s<8;s++){const o=s/8,a=i*(.2+.8*o),r=this.config.opacity*(1-.7*o)*t.intensity,l=this.ctx.createRadialGradient(e,n,.1*a,e,n,a),h=40*Math.sin(t.distortionPhase+.5*s),d=r*(.9-.08*s),c=r*(.3-.03*s);l.addColorStop(0,`hsla(${240+h}, 20%, 5%, ${d})`),l.addColorStop(.3,`hsla(${220+h}, 30%, 8%, ${.8*d})`),l.addColorStop(.7,`hsla(${200+h}, 25%, 12%, ${c})`),l.addColorStop(1,`hsla(${180+h}, 15%, 15%, 0)`),this.ctx.fillStyle=l,this.ctx.beginPath();const p=16,u=.15*Math.sin(t.pulsePhase+.2*s),v=.1*Math.sin(1.3*t.distortionPhase);this.ctx.moveTo(e+Math.cos(0)*a*(1+u+v),n+Math.sin(0)*a*(1+u+v));for(let i=1;i<=p;i++){const o=i/p*Math.PI*2,r=a*(1+(.2*Math.sin(3*o+t.distortionPhase+.3*s)+.15*Math.cos(2*o+t.pulsePhase+.1*s)+.08*Math.sin(5*o+.006*this.time+s)+.05*(Math.random()-.5))+u+v);this.ctx.lineTo(e+Math.cos(o)*r,n+Math.sin(o)*r)}this.ctx.closePath(),this.ctx.fill()}const s=.25*i*t.coreFluctuation*(1+.2*Math.sin(t.pulsePhase)),o=this.ctx.createRadialGradient(e,n,0,e,n,s),a=this.config.opacity*t.intensity*.9;o.addColorStop(0,`rgba(0, 0, 0, ${a})`),o.addColorStop(.6,`rgba(10, 5, 20, ${.8*a})`),o.addColorStop(1,`rgba(20, 10, 30, ${.3*a})`),this.ctx.fillStyle=o,this.ctx.beginPath(),this.ctx.arc(e,n,s,0,2*Math.PI),this.ctx.fill();const r=8+Math.floor(4*Math.random());for(let o=0;o<r;o++){const a=o/r*Math.PI*2+.5*t.distortionPhase+.3*Math.sin(.003*this.time+o),l=i*(1.2+.4*Math.sin(t.pulsePhase+o)+.3*Math.random()),h=4+6*Math.sin(t.distortionPhase+o)+4*Math.random(),d=3;let c=e+Math.cos(a)*s,p=n+Math.sin(a)*s;for(let e=0;e<d;e++){const n=(e+1)/d,i=a+.8*(Math.random()-.5)*t.tendrilRandomness,s=l/d*(1+.5*Math.random()),o=c+Math.cos(i)*s,r=p+Math.sin(i)*s,u=this.ctx.createLinearGradient(c,p,o,r),v=this.config.opacity*t.intensity*.3*(1-.5*n);u.addColorStop(0,`rgba(20, 10, 40, ${v})`),u.addColorStop(.5,`rgba(10, 5, 25, ${.6*v})`),u.addColorStop(1,"rgba(0, 0, 0, 0)"),this.ctx.strokeStyle=u,this.ctx.lineWidth=h*(1-.3*n),this.ctx.lineCap="round",this.ctx.beginPath(),this.ctx.moveTo(c,p),this.ctx.lineTo(o,r),this.ctx.stroke(),c=o,p=r}}}render(){this.ctx.clearRect(0,0,this.width,this.height),this.ghosts.forEach((t=>{this.ctx.globalCompositeOperation="screen",this.drawGlowLayer(t,t.x,t.y,t.radius),this.ctx.globalCompositeOperation="multiply",this.drawShadowLayer(t,t.x,t.y,t.radius)})),this.ctx.globalCompositeOperation="source-over"}animate(){this.time+=16,this.updateGhosts(),this.render(),this.animationId=requestAnimationFrame((()=>this.animate()))}destroy(){this.animationId&&cancelAnimationFrame(this.animationId),this.canvas&&this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas)}}document.addEventListener("DOMContentLoaded",(()=>{if(document.body.classList.contains("home")||"/"===window.location.pathname||"/index.html"===window.location.pathname){new GhostCanvas;let t,e=!1;const n=()=>{const n=window.scrollY,i=Math.min(n/200,1);if(!e){e=!0;let t=document.querySelector(".scroll-background-overlay");t||(t=document.createElement("div"),t.className="scroll-background-overlay",t.style.cssText="\n            position: fixed;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background-color: #181818;\n            opacity: 0;\n            pointer-events: none;\n            z-index: -1;\n            transition: opacity 0.3s ease-out;\n          ",document.body.appendChild(t))}const s=document.querySelector(".scroll-background-overlay");s&&(s.style.opacity=i),clearTimeout(t),t=setTimeout((()=>{e=!1}),150)};window.addEventListener("scroll",n,{passive:!0})}})),window.GhostCanvas=GhostCanvas;