document.addEventListener("DOMContentLoaded",(()=>{const e=document.getElementById("menu-button"),t=document.getElementById("navigation-items");e.addEventListener("click",(()=>{document.body.classList.toggle("open-menu")})),document.addEventListener("click",(n=>{e.contains(n.target)||t.contains(n.target)||document.body.classList.contains("open-menu")&&document.body.classList.remove("open-menu")}))}));class VideoPlayer extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.hasInteracted=!1,this.hideControlsTimeout=null,this.isSeeking=!1}connectedCallback(){const e="ontouchstart"in window;this.render(e),this.video=this.shadowRoot.querySelector("video"),this.videoContainer=this,e||(this.playButton=this.shadowRoot.querySelector("#playButton"),this.muteButton=this.shadowRoot.querySelector("#muteButton"),this.fullscreenButton=this.shadowRoot.querySelector("#fullscreenButton"),this.videoOverlay=this.shadowRoot.querySelector(".video-overlay"),this.controls=this.shadowRoot.querySelector(".controls"),this.progressBar=this.shadowRoot.querySelector(".progress-bar"),this.progressBarFill=this.shadowRoot.querySelector(".progress-bar-fill")),this.video?(e||(this.updateMuteButtonIcon(!0),this.playButton?.addEventListener("click",(()=>this.togglePlay())),this.videoOverlay?.addEventListener("click",(()=>this.togglePlay())),this.muteButton?.addEventListener("click",(()=>this.toggleMute())),this.fullscreenButton?.addEventListener("click",(()=>this.toggleFullscreen())),this.video.addEventListener("timeupdate",(()=>this.updateProgressBar())),this.progressBar?.addEventListener("mousedown",(e=>this.startSeeking(e))),this.progressBar?.addEventListener("mousemove",(e=>this.seeking(e))),this.progressBar?.addEventListener("mouseup",(()=>this.endSeeking())),this.progressBar?.addEventListener("mouseleave",(()=>this.endSeeking())),this.addEventListener("mousemove",(()=>this.showControls())),this.addEventListener("mouseleave",(()=>this.hideControls()))),document.addEventListener("visibilitychange",(()=>this.handleVisibilityChange())),this.video.muted=!0,this.video.play().catch((()=>{e||this.classList.add("paused")}))):console.error("Required video element not found")}render(e=!1){const t=this.getAttribute("video-url"),n=this.hasAttribute("muted"),o=this.hasAttribute("playsinline");this.shadowRoot.innerHTML=`\n            <style>\n                :host {\n                    display: flex;\n                    position: relative;\n                    justify-content: center;\n                    align-items: center;\n                    background-color: black;\n                    overflow: hidden;\n                    /* Add CSS custom property with fallback color */\n                    --theme-color: var(--video-theme-color, currentColor);\n                }\n                .video {\n                    pointer-events: ${e?"auto":"none"};\n                    z-index: 10;\n                    max-height: 100%;\n                    max-width: 100%;\n                }\n                ${e?"":"\n                    .video-overlay {\n                        position: absolute;\n                        top: -1px;\n                        right: -1px;\n                        bottom: -1px;\n                        left: -1px;\n                        z-index: 20;\n                        opacity: 0;\n                        background: linear-gradient(to bottom, transparent, rgba(0, 0, 0, 0.6));\n                        cursor: pointer;\n                        transition: opacity 200ms linear;\n                    }\n                    .video-overlay:hover{\n                        opacity: 0.4;\n                    }\n                    :host(.paused) .video-overlay{\n                        opacity: 1;\n                    }\n                    .video {\n                        pointer-events: none;\n                        z-index: 10;\n                        max-height: 100%;\n                        max-width: 100%;\n                    }\n                    .controls {\n                        position: absolute;\n                        left: 0;\n                        right: 0;\n                        bottom: 0;\n                        z-index: 40;\n                        display: flex;\n                        flex-direction: column;\n                        pointer-events: auto;\n                        opacity: 0;\n                        transition: opacity 0.3s ease;\n                    }\n                    .controls-bottom {\n                        display: flex;\n                        flex-direction: row;\n                        align-items: center;\n                        justify-content: space-between;\n                        padding: 0 16px 12px;\n                    }\n                    .progress-bar {\n                        width: 100%;\n                        height: 4px;\n                        background: rgba(255, 255, 255, 0.2);\n                        position: relative;\n                        cursor: pointer;\n                        margin-bottom: 8px;\n                    }\n                    .progress-bar:hover {\n                        height: 8px;\n                        margin-top: -2px;\n                    }\n                    .progress-bar-fill {\n                        position: absolute;\n                        top: 0;\n                        left: 0;\n                        height: 100%;\n                        background: var(--theme-color);\n                        width: 0%;\n                        transition: width 0.1s linear;\n                    }\n                    .seek-handle {\n                        position: absolute;\n                        top: 50%;\n                        transform: translate(-50%, -50%);\n                        width: 12px;\n                        height: 12px;\n                        background: var(--theme-color);\n                        border-radius: 50%;\n                        opacity: 0;\n                        transition: opacity 0.2s;\n                        pointer-events: none;\n                    }\n                    .progress-bar:hover .seek-handle {\n                        opacity: 1;\n                    }\n                    .play-button {\n                        position: absolute;\n                        inset: 0;\n                        z-index: 30;\n                        display: none;\n                        align-items: center;\n                        justify-content: center;\n                        cursor: pointer;\n                    }\n                        \n                    :host(.paused) .play-button {\n                        display: flex;\n                    }\n\n                    .play-button-inner {\n                        width: 72px;\n                        height: 72px;\n                        background-color: var(--theme-color);\n                        border-radius: 50%;\n                        display: flex;\n                        align-items: center;\n                        justify-content: center;\n                        opacity: 0.85;\n                    }\n                    .play-button-inner:hover {\n                        opacity: 1;\n                    }\n                    .play-button svg {\n                        width: 24px;\n                        height: 24px;\n                        transform: translateX(2px);\n                        fill: white;\n                        stroke: transparent;\n                    }\n                    button {\n                        background-color: transparent;\n                        border: none;\n                        color: white;\n                        padding-top: 16px;\n                        padding-bottom: 12px;\n                        padding-left: 16px;\n                        padding-right: 16px;\n                        cursor: pointer;\n                        border-radius: 4px;\n                        transition: background-color 0.3s, transform 0.3s;\n                    }\n                    button:hover {\n                        transform: scale(1.05);\n                    }\n                    button:active {\n                        transform: scale(0.95);\n                    }\n                    .icon {\n                        width: 24px;\n                        height: 24px;\n                        stroke: var(--theme-color);\n                        stroke-width: 1.5px;\n                    }\n                    .sr-only {\n                        position: absolute;\n                        width: 1px;\n                        height: 1px;\n                        padding: 0;\n                        margin: -1px;\n                        overflow: hidden;\n                        clip: rect(0, 0, 0, 0);\n                        white-space: nowrap;\n                        border: 0;\n                    }\n                    .button-group {\n                        display: flex;\n                        align-items: center;\n                        gap: 0.5rem;\n                    }   \n\n                    /* Show controls by default on touch devices */\n                    @media (hover: none) {\n                        .controls {\n                            opacity: 1;\n                        }\n                    }\n\n                    /* Show controls on hover for non-touch devices */\n                    :host(:hover) .controls {\n                        opacity: 1;\n                    }\n                "}\n            </style>\n            ${e?"":'<div class="video-overlay"></div>'}\n            <video \n                id="video" \n                class="video" \n                width="100%" \n                ${n?"muted":""} \n                ${o?"playsinline":""} \n                ${e?"controls":""}\n                autoplay \n                loop\n            >\n                <source src="${t}" type="video/mp4">\n                Your browser does not support HTML5 video.\n            </video>\n            ${e?"":'\n                <div class="controls">\n                    <div class="progress-bar">\n                        <div class="progress-bar-fill"></div>\n                        <div class="seek-handle"></div>\n                    </div>\n                    <div class="controls-bottom">\n                        <div class="button-group">\n                            <button id="muteButton">\n                                <span class="sr-only">Mute</span>\n                            </button>\n                        </div>\n                        <button id="fullscreenButton">\n                            <svg class="icon" id="fullscreenIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                                <path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M21 8V5a2 2 0 0 0-2-2h-3"/><path d="M3 16v3a2 2 0 0 0 2 2h3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/>\n                            </svg>\n                            <span class="sr-only">Fullscreen</span>\n                        </button>\n                    </div>\n                </div>\n                <div id="playButton" class="play-button">\n                    <div class="play-button-inner">\n<svg width="14" height="16" viewBox="0 0 14 16" stroke="currentColor" xmlns="http://www.w3.org/2000/svg">\n<path d="M0.5 14.3507V1.64929C0.5 0.871991 1.34797 0.391878 2.0145 0.791793L12.599 7.14251C13.2464 7.53091 13.2464 8.46909 12.599 8.85749L2.0145 15.2082C1.34797 15.6081 0.5 15.128 0.5 14.3507Z" stroke-linecap="round" stroke-linejoin="round"/>\n</svg>\n\n                    </div>\n                    <span class="sr-only">Play</span>\n                </div>\n            '}\n        `}togglePlay(){this.video.paused?(this.video.play(),this.classList.remove("paused"),this.showControls()):(this.video.pause(),this.classList.add("paused"),clearTimeout(this.hideControlsTimeout),this.showControls())}toggleMute(){this.video.muted=!this.video.muted,this.updateMuteButtonIcon(this.video.muted),this.hasInteracted=!0,this.hideControlsIfPlaying()}updateMuteButtonIcon(e){this.muteButton.innerHTML=e?'\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-x icon">\n                <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/>\n                <path d="m18 12 4-4"/>\n                <path d="m22 12-4-4"/>\n            </svg>\n            <span class="sr-only">Unmute</span>\n        ':'\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-volume-2 icon">\n                <path d="M11 4.702a.705.705 0 0 0-1.203-.498L6.413 7.587A1.4 1.4 0 0 1 5.416 8H3a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1h2.416a1.4 1.4 0 0 1 .997.413l3.383 3.384A.705.705 0 0 0 11 19.298z"/>\n                <path d="M16 9a5 5 0 0 1 0 6"/>\n                <path d="M19.364 18.364a9 9 0 0 0 0-12.728"/>\n            </svg>\n            <span class="sr-only">Mute</span>\n        '}toggleFullscreen(){document.fullscreenElement?document.exitFullscreen().then((()=>{this.fullscreenButton.innerHTML='\n            <svg class="icon" id="fullscreenIcon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">\n                <path d="M8 3H5a2 2 0 0 0-2 2v3"/><path d="M21 8V5a2 2 0 0 0-2-2h-3"/><path d="M3 16v3a2 2 0 0 0 2 2h3"/><path d="M16 21h3a2 2 0 0 0 2-2v-3"/>\n            </svg>\n        '})).catch((e=>console.log("Exit fullscreen failed:",e))):this.videoContainer.requestFullscreen().then((()=>{this.fullscreenButton.innerHTML='\n            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-minimize icon">\n                <path d="M8 3v3a2 2 0 0 1-2 2H3"/><path d="M21 8h-3a2 2 0 0 1-2-2V3"/><path d="M3 16h3a2 2 0 0 1 2 2v3"/><path d="M16 21v-3a2 2 0 0 1 2-2h3"/>\n            </svg>\n        ',this.showControls()})).catch((e=>console.log("Fullscreen failed:",e)))}hideControlsIfPlaying(){this.video.paused||this.video.muted||this.controls.classList.add("opacity-0")}showControls(){clearTimeout(this.hideControlsTimeout),this.controls.style.opacity="1",this.video.paused||(this.hideControlsTimeout=setTimeout((()=>{this.hideControls()}),2e3))}hideControls(){this.video.paused||this.isSeeking||(this.controls.style.opacity="0")}handleVisibilityChange(){document.hidden&&this.video.pause()}updateProgressBar(){if(this.video.duration){const e=this.video.currentTime/this.video.duration*100;this.progressBarFill.style.width=`${e}%`;const t=this.shadowRoot.querySelector(".seek-handle");t&&(t.style.left=`${e}%`)}}startSeeking(e){this.isSeeking=!0,this.seeking(e),clearTimeout(this.hideControlsTimeout)}seeking(e){if(!this.isSeeking)return;let t;t=e.type.startsWith("touch")?e.touches[0].clientX:e.clientX;const n=this.progressBar.getBoundingClientRect(),o=(t-n.left)/n.width,s=Math.max(0,Math.min(1,o))*this.video.duration;this.progressBarFill.style.width=100*o+"%";const i=this.shadowRoot.querySelector(".seek-handle");i&&(i.style.left=100*o+"%"),this.video.currentTime=s}endSeeking(){this.isSeeking=!1,this.showControls()}}function fadeInElements(){let e=0;const t=document.querySelectorAll(".fade-in-element:not(.visible)");!function(e,t=66){if(!e||"function"!=typeof e)return;let n;window.addEventListener("scroll",(function(o){window.clearTimeout(n),n=setTimeout(e,t)}),!1)}((function(){e=0}));const n=new IntersectionObserver((t=>{t.forEach((t=>{if(t.isIntersecting){const o=50*e;((e,t)=>{setTimeout((()=>{e.classList.add("visible"),e.addEventListener("transitionend",(()=>{e.classList.remove("fade-in-element")}))}),t)})(t.target,o),n.unobserve(t.target),e++}}))}));t.forEach((e=>n.observe(e)))}customElements.define("video-player",VideoPlayer),document.addEventListener("DOMContentLoaded",(()=>{document.fonts.ready.then((()=>{document.querySelectorAll(".hidden-until-loaded").forEach((e=>{e.classList.remove("hidden-until-loaded")})),fadeInElements()}))})),document.addEventListener("DOMContentLoaded",(()=>{document.querySelectorAll(".flip-card").forEach((e=>{e.addEventListener("mouseenter",(()=>{e.classList.add("flipped"),setTimeout((()=>{e.classList.remove("flipped")}),550)}))}))}));const imgObserver=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting){const n=e.target;replaceImageWithVideo(n),setSrcSetAndSizes(n),t.unobserve(n)}}))}),{rootMargin:"0px 0px 200px 0px"}),replaceImageWithVideo=e=>{const t=e.getAttribute("data-video");if(t){const n=document.createElement("video");n.src=t,n.style.objectFit="cover",n.setAttribute("playsinline",""),n.setAttribute("muted",""),n.playbackRate=1,n.addEventListener("ended",(()=>n.pause()));const o=e.closest(".media-wrapper");o&&(e.replaceWith(n),o.addEventListener("transitionend",(()=>{n.play()})))}},setSrcSetAndSizes=e=>{const t=e.clientWidth,n="https://ik.imagekit.io/UltraDAO/wallace/",o=e.src.split("/").pop().split("?")[0],s=e.getAttribute("data-max-width");if(s&&s<=t)e.src=`${n}${o}?tr=q-70`;else{let i=t,r=2*t,l=3*t,a=4*t;s&&(i=Math.min(s,i),r=Math.min(s,r),l=Math.min(s,l),a=Math.min(s,a));const d=`${n}${o}?tr=w-${i},q-70 1x,\n                            ${n}${o}?tr=w-${r},q-70 2x,\n                            ${n}${o}?tr=w-${l},q-70 3x`,c=`(max-width: 400px) ${i}px,\n                        (max-width: 800px) ${r}px,\n                        (max-width: 1200px) ${l}px,\n                        ${a}px`;e.src=`${n}${o}?tr=w-${i},q-70`,e.srcset=d,e.sizes=c}e.classList.add("loaded")},cardObserver=new IntersectionObserver(((e,t)=>{e.forEach((e=>{if(e.isIntersecting){const n=e.target;setBackground(n),t.unobserve(n)}}))}),{rootMargin:"0px 0px 200px 0px"}),setBackground=e=>{const t=e.clientWidth,n=window.devicePixelRatio||1,o=e.style.backgroundImage,[s,i]=o.slice(5,-2).split("?"),r=`${s}?tr=w-${Math.round(t*n)},q-70`;e.style.backgroundImage=`url("${r}")`,e.classList.add("loaded")};document.querySelectorAll(".bg-image-card").forEach((e=>{cardObserver.observe(e)})),document.addEventListener("DOMContentLoaded",(function(){const e=document.querySelectorAll(".zoomable");let t=null,n={};function o(e){const t=n[e];e.style.transition="all 0.3s ease",e.style.top=`${t.top}px`,e.style.left=`${t.left}px`,e.style.width=`${t.width}px`,e.style.height=`${t.height}px`,e.style.transform="none",setTimeout((()=>{e.parentNode.style.height="",e.classList.remove("zoom-fullscreen"),e.style.zIndex="1",e.style.position="",e.style.top="",e.style.left="",e.style.width="",e.style.height="",e.style.transform="",document.body.style.overflow=""}),300)}e.forEach((e=>{e.style.cursor="zoom-in",e.addEventListener("click",(function(){const s=e.classList.contains("zoom-fullscreen"),i=e.getAttribute("data-type");s?(document.body.classList.remove("zoom-active"),o(e),e.style.cursor="zoom-in","video"===i&&(e.muted=!0)):(t||(t=document.createElement("div"),t.className="page-overlay",document.body.appendChild(t)),document.body.classList.add("zoom-active"),function(e){const t=function(e){const t=e.getBoundingClientRect();return{left:t.left,top:t.top,width:t.width,height:t.height}}(e);n[e]=t;const o=.9*window.innerWidth,s=.9*window.innerHeight,{width:i,height:r}=function(e,t){const n=4/3;return e/t>n?e=t*n:t=e/n,{width:e,height:t}}(o,s);requestAnimationFrame((()=>{e.parentNode.style.height=`${t.height}px`,e.classList.add("zoom-fullscreen"),e.style.top="50%",e.style.left="50%",e.style.width=`${i}px`,e.style.height=`${r}px`,e.style.transform="translate(-50%, -50%)"})),e.style.position="fixed",e.style.top=`${t.top}px`,e.style.left=`${t.left}px`,e.style.width=`${t.width}px`,e.style.height=`${t.height}px`,e.style.zIndex="9999"}(e),document.body.style.overflow="hidden",e.style.cursor="zoom-out","video"===i&&(e.muted=!1,e.play()))}))})),t&&t.addEventListener("click",(()=>{document.querySelectorAll(".zoom-fullscreen").forEach((e=>{e.classList.remove("zoom-fullscreen"),o(e)})),document.body.classList.remove("active")}));document.querySelectorAll(".image-gallery").forEach((e=>{const t=e.querySelectorAll("img");let n=0,o=null;function s(e){t.forEach(((t,n)=>{t.style.display=n===e?"block":"none"}))}o=setInterval((function(){n=(n+1)%t.length,s(n)}),2e3),s(n)}))}));